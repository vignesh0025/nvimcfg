# https://man7.org/linux/man-pages/man1/tmux.1.html
# Use tmux -vv to get log files in the current directory: THis includes the plugin information
# as well
# bind-key   -> Binds Keys default (without -T), the key is bound in the prefix key table
# alias: bind
# bind-key -T-> Binds Keys globally and doesn't require prefix key
# send-keys      -> send a key to a window such as C-a
# (alias: send)  -X is used to send a command into copy mode
#                -M passes through a mouse event
# send-prefix-> Send prefix keys to a window
set -g prefix C-q
bind-key C-q send-prefix

#setting delay between prefix and command
set -s escape-time 1

#VI Working buffer
setw -g mode-keys vi

# Start windows and panes at 1, not 0
set -g base-index 1
setw -g base-index 1
setw -g pane-base-index 1

# Ensure window titles get renamed automatically.
#setw -g automatic-rename
set-option -g status-interval 1
set-option -g automatic-rename on
set-option -g automatic-rename-format '#{b:pane_current_path}'

# colors
set -g default-terminal "screen-256color"
set-option -ga terminal-overrides ",xterm-256color:Tc"

# Mouse support
# '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
# Enable full mouse support.
setw -g mouse on
# '''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

# Enable activity alerts when working on other window
setw -g monitor-activity on
set -g visual-activity on

#Justify status line
set -g status-justify centre

#Move status bar to top
set-option -g status-position top

# -----------------------------------------------------------------------------
# Unbind default keys
# -----------------------------------------------------------------------------
unbind C-z
unbind C-b
unbind '"'
unbind %

# -----------------------------------------------------------------------------
# Remap new bindings
# -----------------------------------------------------------------------------
# Reload the tmux config.
bind-key r source-file ~/.tmux.conf\; display 'Reloaded!'

# Split panes and change current folder to current path
bind-key s split-window -v -c "#{pane_current_path}"
bind-key - split-window -v -c "#{pane_current_path}"
bind-key v split-window -h -c "#{pane_current_path}"
bind-key | split-window -h -c "#{pane_current_path}"
bind-key n new-window -c "$HOME"

# Not Required as c is already the shortcut.
# Enable if you want to change the default directory
# bind-key c new-window -c "#{pane_current_path}"

# Move around panes with ALT + Arrow keys.
bind-key -n M-Up select-pane -U
bind-key -n M-Left select-pane -L
bind-key -n M-Down select-pane -D
bind-key -n M-Right select-pane -R
bind-key -n M-k select-pane -U
bind-key -n M-h select-pane -L
bind-key -n M-j select-pane -D
bind-key -n M-l select-pane -R

is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"

bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'M-Left' if-shell "$is_vim" 'send-keys M-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'M-Down' if-shell "$is_vim" 'send-keys M-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'M-Up' if-shell "$is_vim" 'send-keys M-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }
bind-key -n 'M-Right' if-shell "$is_vim" 'send-keys M-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind-key -T copy-mode-vi 'M-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'M-Left' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'M-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'M-Down' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'M-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'M-Up' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'M-l' if -F '#{pane_at_right}' '' 'select-pane -R'
bind-key -T copy-mode-vi 'M-Right' if -F '#{pane_at_right}' '' 'select-pane -R'

# switch windows alt+number
bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# Move around panes with
bind-key k select-pane -U
bind-key h select-pane -L
bind-key j select-pane -D
bind-key l select-pane -R

# Quick window selection
bind-key -r C-h select-window -t :-
bind-key -r C-l select-window -t :+

# Resize Pane
bind-key H resize-pane -L 5
bind-key J resize-pane -D 5
bind-key K resize-pane -U 5
bind-key L resize-pane -R 5

# Not supported in terminals. So totally leave it
set -s set-clipboard off

# Use external tooling for clipboard
# copy-command supported only in tmux 3.2 and later
# All copy-pipe commands use this when no explicit argument is given
set -s copy-command "xclip -selection clipboard -i"
bind-key Escape copy-mode
bind-key -T copy-mode-vi "v" send-keys -X begin-selection
bind-key -T copy-mode-vi "y" send-keys -X copy-pipe-and-cancel
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel
unbind p
bind-key p paste-buffer

# Confirm before quitting
bind-key q confirm-before -p "kill-session ? (y/n)" kill-session

# Send the current pane **to** :<window-no> eg. C-q C-t :1
# ':' is important -> ':1' represents window 1 whereas '1' represents pane 1
bind-key C-t command-prompt -p "send pane to:"  "join-pane -t '%%'"

# Join a pane from window # Not particularly useful though
bind-key C-j command-prompt -p "join pane from:"  "join-pane -s '%%'"

# Break the current pane to its own window Super Useful: Vignesh
bind-key b break-pane

# Kill all panes except the current pane
bind-key c confirm-before -p "Kill current panes ? (y/n)" "kill-pane"
bind-key o confirm-before -p "Kill remaining panes ? (y/n)" "kill-pane -a"
bind-key X confirm-before -p "Kill remaining panes ? (y/n)" "kill-pane -a"
bind-key O confirm-before -p "Kill remaining windows ? (y/n)" "kill-window -a"
bind-key C-X confirm-before -p "Kill remaining windows ? (y/n)" "kill-window -a"

# run <prefix> + I to reload the configurations
# List of plugins.
set -g @plugin 'tmux-plugins/tpm'

# <prefix> C-s and <prefix> C-r
set -g @plugin 'tmux-plugins/tmux-resurrect'

# Sensible TMUX Options
set -g @plugin 'tmux-plugins/tmux-sensible'

# Tokyo Night
set -g @plugin "janoamaral/tokyo-night-tmux"

# Settings for tmux-recurrect:
set -g @resurrect-save-bash-history 'on'

# Initialize TPM (keep this line at the very bottom of your tmux.conf).
run -b '~/.tmux/plugins/tpm/tpm'

# if run as "tmux attach", create a session if one does not already exist
# Also `THIS IS WHAT STARTS LINUX IN HOME DIRECTORY`
# new-session -n $HOST -c $HOME
